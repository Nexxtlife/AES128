library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity divider is 
port(
	clk : in std_logic;
	reset_n : in std_logic;

	in_data : in std_logic_vector(127 downto 0);

	out_data_1 : out std_logic_vector(31 downto 0);
	out_data_2 : out std_logic_vector(31 downto 0);
	out_data_3 : out std_logic_vector(31 downto 0);
	out_data_4 : out std_logic_vector(31 downto 0)
);
end entity;


architecture behave of divider is

	signal display_sig_0 : std_logic_vector(7 downto 0);
	signal display_valid_0 : std_logic;
	signal display_ready_0 : std_logic;
	
	signal display_sig_1 : std_logic_vector(7 downto 0);
	signal display_valid_1 : std_logic;
	signal display_ready_1 : std_logic;
	
	signal display_sig_2 : std_logic_vector(7 downto 0);
	signal display_valid_2 : std_logic;
	signal display_ready_2 : std_logic;
	
	signal display_sig_3 : std_logic_vector(7 downto 0);
	signal display_valid_3 : std_logic;
	signal display_ready_3 : std_logic;
	
	
	component AES_test_sys is
		port (
			clk_clk                                 : in  std_logic                    := 'X'; -- clk
			display_0_avalon_streaming_source_data  : out std_logic_vector(7 downto 0);        -- data
			display_0_avalon_streaming_source_ready : in  std_logic                    := 'X'; -- ready
			display_0_avalon_streaming_source_valid : out std_logic;                           -- valid
			display_1_avalon_streaming_source_data  : out std_logic_vector(7 downto 0);        -- data
			display_1_avalon_streaming_source_ready : in  std_logic                    := 'X'; -- ready
			display_1_avalon_streaming_source_valid : out std_logic;                           -- valid
			display_2_avalon_streaming_source_data  : out std_logic_vector(7 downto 0);        -- data
			display_2_avalon_streaming_source_ready : in  std_logic                    := 'X'; -- ready
			display_2_avalon_streaming_source_valid : out std_logic;                           -- valid
			display_3_avalon_streaming_source_data  : out std_logic_vector(7 downto 0);        -- data
			display_3_avalon_streaming_source_ready : in  std_logic                    := 'X'; -- ready
			display_3_avalon_streaming_source_valid : out std_logic;                           -- valid
			reset_reset_n                           : in  std_logic                    := 'X'  -- reset_n
		);
	end component AES_test_sys;

	u0 : component AES_test_sys
		port map (
			clk_clk                                 => CONNECTED_TO_clk_clk,                                 --                               clk.clk
			display_0_avalon_streaming_source_data  => CONNECTED_TO_display_0_avalon_streaming_source_data,  -- display_0_avalon_streaming_source.data
			display_0_avalon_streaming_source_ready => CONNECTED_TO_display_0_avalon_streaming_source_ready, --                                  .ready
			display_0_avalon_streaming_source_valid => CONNECTED_TO_display_0_avalon_streaming_source_valid, --                                  .valid
			display_1_avalon_streaming_source_data  => CONNECTED_TO_display_1_avalon_streaming_source_data,  -- display_1_avalon_streaming_source.data
			display_1_avalon_streaming_source_ready => CONNECTED_TO_display_1_avalon_streaming_source_ready, --                                  .ready
			display_1_avalon_streaming_source_valid => CONNECTED_TO_display_1_avalon_streaming_source_valid, --                                  .valid
			display_2_avalon_streaming_source_data  => CONNECTED_TO_display_2_avalon_streaming_source_data,  -- display_2_avalon_streaming_source.data
			display_2_avalon_streaming_source_ready => CONNECTED_TO_display_2_avalon_streaming_source_ready, --                                  .ready
			display_2_avalon_streaming_source_valid => CONNECTED_TO_display_2_avalon_streaming_source_valid, --                                  .valid
			display_3_avalon_streaming_source_data  => CONNECTED_TO_display_3_avalon_streaming_source_data,  -- display_3_avalon_streaming_source.data
			display_3_avalon_streaming_source_ready => CONNECTED_TO_display_3_avalon_streaming_source_ready, --                                  .ready
			display_3_avalon_streaming_source_valid => CONNECTED_TO_display_3_avalon_streaming_source_valid, --                                  .valid
			reset_reset_n                           => CONNECTED_TO_reset_reset_n                            --                             reset.reset_n
		);
begin

	process (clk)
	begin
	
	if rising_edge(clk) then
		if reset_n = '0' then
			out_data_1 <= (others=>'0');
			out_data_2 <= (others=>'0');
			out_data_3 <= (others=>'0');
			out_data_4 <= (others=>'0');
		else
			out_data_1 <= in_data(127 downto 96);
			out_data_2 <= in_data(95 downto 64);
			out_data_3 <= in_data(63 downto 32);
			out_data_4 <= in_data(31 downto 0);
			
		end if;
	end if;
	end process;

end behave;